# In[1]:import pandas as pdimport numpy as npimport pandas as pdrfrom datetime import datetimefrom arch import arch_modelimport matplotlib.pyplot as pltimport matplotlib.dates as matdateimport datetime as dtimport sysGBPUSD = pd.read_csv('Daily_PX_final.csv',header=0)RV = pd.read_csv('RV_final_daily_agg0.csv',header=0)implied = pd.read_csv('implied_final.csv',header=0)dates = np.array(GBPUSD['Dates'])# ret_dates = datetime.strptime(np.array(implied['Dates']), '%d %M %Y')ret_dates = np.array(RV['Dates'])d = {'Close':np.array(GBPUSD['PX_LAST'])}s = {'Close':np.array(RV['Close'])}fxpd = pd.DataFrame(data=d, index=dates)rvpd = pd.DataFrame(data=s, index=ret_dates)GBPUSD_log_ret_close = np.diff(np.log(np.array(GBPUSD['PX_LAST'])))RV = RV['RV']implied = np.diff(np.log(np.sqrt(np.array(implied['PX_LAST']))))/(np.sqrt(250/7))garch_forecast =[]RV_forecast =[]implied_forcast =[]for i in range(0,fxpd.index.get_loc('12/03/2018')-fxpd.index.get_loc('12/09/2017')+1):    roll_window = GBPUSD_log_ret_close[fxpd.index.get_loc('11/09/2017') - 250 + i:fxpd.index.get_loc('11/09/2017') + i]    RV_window = np.sqrt(RV[rvpd.index.get_loc('11/09/2017') - 6:rvpd.index.get_loc('11/09/2017') + i])    implied_window = implied[fxpd.index.get_loc('11/09/2017') - 250+i:fxpd.index.get_loc('11/09/2017') + i]    garch11 = arch_model(roll_window, mean='zero', p=1, o=1, q=1, dist='StudentsT')    arch1_RV = arch_model(RV_window, mean='zero', p=1, o=0, q=0, dist='StudentsT')    arch1_implied = arch_model(implied_window, mean='zero', p=1, o=0, q=0, dist='StudentsT')    res = garch11.fit(update_freq=100, disp='off')    res_RV = arch1_RV.fit(update_freq=100, disp='off')    res_implied = arch1_implied.fit(update_freq=100, disp='off')    garch_forecast_vol = res.forecast(horizon=1).variance.dropna().head()    arch1RV_forecast_vol = res_RV.forecast(horizon=1).variance.dropna().head()    res_forecast_implied_vol = res_implied.forecast(horizon=1).variance.dropna().head()    garch_forecast.append(garch_forecast_vol.iloc[0]['h.1'])    RV_forecast.append(arch1RV_forecast_vol.iloc[0]['h.1'])    implied_forcast.append(res_forecast_implied_vol.iloc[0]['h.1'])plot_ret_dates = ret_datesplt.plot(np.arange(0,len(garch_forecast)),garch_forecast, label = 'garch(1,1) 1 day forecast')plt.plot(np.arange(0,len(RV_forecast)),RV_forecast, label = 'realized vol 1 day forecast')plt.plot(np.arange(0,len(implied_forcast)),implied_forcast, label = 'implied vol 1 day forecast')plot_RV =RV[rvpd.index.get_loc('12/09/2017'):rvpd.index.get_loc('12/03/2018')+1]plt.plot(np.arange(0,len(plot_RV)), plot_RV, label = 'actual daily vol')plt.xlabel("no. of days"+ "\n" +  "(from 2017-09-12 to 2018-03-12)")plt.legend()plt.title('GARCH(1,1) forecast and Realized Volatility forecast of GBPUSD returns')plt.show()# P testP_garch = 1 - np.divide(np.sum((plot_RV-garch_forecast)**2),np.sum((plot_RV - plot_RV.mean())**2) )P_RV = 1 - np.divide(np.sum((plot_RV-RV_forecast)**2), np.sum((plot_RV - plot_RV.mean())**2))P_implied = 1 - np.divide(np.sum((plot_RV-implied_forcast)**2), np.sum((plot_RV - plot_RV.mean())**2))print(P_garch, P_RV, P_implied)